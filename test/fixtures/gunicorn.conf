import logging
import os


import gunicorn.glogging


bind = '0.0.0.0:4114'

log_level = 'INFO'

error_logfile = '-'

access_logfile = '-'

workers = 1

worker_class = 'sync'

proc_name = 'rump'

logconfig = """\
{
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'NOTSET',
            'formatter': 'console',
            'stream': None,  # stderr
        },
    },
    'formatters': {
        'console': {
            'format': (
                '%(asctime)s,%(msecs)03d : '
                '%(levelname)-5.5s : '
                '%(name)s : '
                '%(message)s'
            ),
            'datefmt': '%H:%M:%S',
        },
    },
    'loggers': {
        'gunicorn': {
            'qualname': 'gunicorn',
            'propagate': True,
        },
        'gunicorn.access': {
            'level': 'INFO',
            'qualname': 'gunicorn.access',
            'propagate': False,
            'handlers': ['console'],
        },
    },
    'root': {
        'level': log_level,
        'handlers': ['console'],
    },
}
"""

class logger_class(gunicorn.glogging.Logger):

    def setup(self, cfg):
        if not cfg.logconfig:
            return super(logger_class, self).setup(cfg)
        logconfig = eval(cfg.logconfig, {
            'logger_class': self,
            'log_level': cfg.loglevel.upper(),
        })
        logging.config.dictConfig(logconfig)


def post_worker_init(worker):
    import rump

    conf_file = os.path.abspath(
        os.path.join(os.path.dirname(__file__), 'settings', 'main.conf')
    )
    settings = rump.Settings.from_file(conf_file)
    rump.wsgi.app.settings.map({'routers': settings.routers})
